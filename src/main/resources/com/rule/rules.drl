package com.rule

import com.retail.stock.repository.product.Product
import com.retail.stock.application.rule.StockCheckFact

global org.slf4j.Logger logger;

// Blocked rule(s)
rule "Block order for 'c'"
    activation-group "c"
    salience 10
when
    stockCheck: StockCheckFact( product.name == "c" )
then
    adviceForBlockedProduct(stockCheck, logger);
end

// One off order rule(s)
rule "One off order for 'd'"
    activation-group "d"
    salience 10
when
    stockCheck: StockCheckFact( product.name == "d" )
then
    adviceForProductWithOneOffOrder(stockCheck, 15, logger);
end

// Minimum stock level rule(s)
rule "Minimum stock level for 'a'"
when
    stockCheck: StockCheckFact( product.name == "a" )
then
    adviceForProductWithMinimumStockLevel(stockCheck, 4, logger);
end

rule "Minimum stock level for 'b'"
when
    stockCheck: StockCheckFact( product.name == "b" )
then
    adviceForProductWithMinimumStockLevel(stockCheck, 4, logger);
end

rule "Minimum stock level for 'c'"
    activation-group "c"
when
    stockCheck: StockCheckFact( product.name == "c" )
then
    adviceForProductWithMinimumStockLevel(stockCheck, 4, logger);
end

rule "Minimum stock level for 'd'"
    activation-group "d"
when
    stockCheck: StockCheckFact( product.name == "d" )
then
    adviceForProductWithMinimumStockLevel(stockCheck, 8, logger);
end

rule "Minimum stock level for 'e'"
when
    stockCheck: StockCheckFact( product.name == "e" )
then
    adviceForProductWithMinimumStockLevel(stockCheck, 4, logger);
end

function void adviceForBlockedProduct(StockCheckFact stockCheckFact, org.slf4j.Logger logger) {
    logger.info("Product '" + stockCheckFact.getProduct().getName() + "' is 'blocked' and unable to order.");
    stockCheckFact.setQuantityRequired(0);
}

function void adviceForProductWithOneOffOrder(StockCheckFact stockCheckFact, int quantityRequired, org.slf4j.Logger logger) {
    logger.info("Product '" + stockCheckFact.getProduct().getName() + "' requires order quantity of " + quantityRequired + ".");
    stockCheckFact.setQuantityRequired(quantityRequired);
}

function void adviceForProductWithMinimumStockLevel(StockCheckFact stockCheckFact, int minimumStockLevel, org.slf4j.Logger logger) {
    Product product = stockCheckFact.getProduct();

    int quantity = product.getQuantity();
    if (quantity < minimumStockLevel) {
        int quantityRequired = (minimumStockLevel - quantity);
        logger.info("Product '" + stockCheckFact.getProduct().getName() + "' requires order quantity of " + quantityRequired + ".");
        stockCheckFact.setQuantityRequired(quantityRequired);
    } else {
        logger.info("Product '" + stockCheckFact.getProduct().getName() + "' does not require an order.");
        stockCheckFact.setQuantityRequired(0);
    }
}